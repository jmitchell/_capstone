* [[http://www.capstone-engine.org/lang_c.html][C Tutorial]]
Here is an example C program from the tutorial:

#+BEGIN_SRC c :tangle test1.c
/* test1.c */

#include <stdio.h>
#include <inttypes.h>

#include <capstone/capstone.h>

#define CODE "\x55\x48\x8b\x05\xb8\x18\x00\x00"

int main(void)
{
  csh handle;
  cs_insn *insn;
  size_t count;

  if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle) != CS_ERR_OK)
    return -1;
  count = cs_disasm(handle, CODE, sizeof(CODE)-1, 0x1000, 0, &insn);
  if (count > 0) {
    size_t j;
    for (j = 0; j < count; j++) {
      printf("0x%"PRIx64":\t%s\t\t%s\n", insn[j].address, insn[j].mnemonic,
             insn[j].op_str);
    }

    cs_free(insn, count);
  } else
    printf("ERROR: Failed to disassemble given code!\n");

  cs_close(&handle);

  return 0;
}
#+END_SRC

And here's the Makefile:

#+BEGIN_SRC makefile :tangle Makefile
# capstone library name (without prefix 'lib' and suffix '.so')
LIBNAME = capstone

test1: test1.o
	${CC} $< -O3 -Wall -l$(LIBNAME) -o $@

%.o: %.c
	${CC} -c $< -o $@
#+END_SRC

To compile, just run =make=.

#+BEGIN_SRC sh :results value verbatim
make
#+END_SRC

#+RESULTS:
: cc -c test1.c -o test1.o
: cc test1.o -O3 -Wall -lcapstone -o test1

And finally, run =test1=.

#+BEGIN_SRC sh :results value table :exports both
./test1
#+END_SRC

#+RESULTS:
| 0x1000: | push |   | rbp                           |
| 0x1001: | mov  |   | rax, qword ptr [rip + 0x18b8] |
